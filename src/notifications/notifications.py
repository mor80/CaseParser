import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from sqlalchemy import and_, select

from src.core.database import DatabaseService
from src.models.models import Case, CaseStatistics, PriceHistory
from src.notifications.telegram_bot import TelegramConfig, TelegramNotificationService


@dataclass
class AlertThreshold:
    """–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
    price_change_percent: float  # –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    min_price: Optional[float] = None  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
    max_price: Optional[float] = None  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞


@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""
    case_id: str
    case_name: str
    current_price: float
    previous_price: float
    price_change_percent: float
    alert_type: str  # 'price_increase', 'price_decrease', 'price_threshold'
    timestamp: datetime


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω"""
    
    def __init__(self, db_service: DatabaseService, telegram_config: Optional[TelegramConfig] = None):
        self.db_service = db_service
        self.alert_thresholds = {
            'high_volatility': AlertThreshold(price_change_percent=10.0),
            'medium_volatility': AlertThreshold(price_change_percent=5.0),
            'low_volatility': AlertThreshold(price_change_percent=2.0)
        }
        self.telegram_config = telegram_config
        self.telegram_service = None
        self.logger = logging.getLogger(__name__)
        
        if telegram_config:
            self.telegram_service = TelegramNotificationService(db_service, telegram_config)
    
    async def check_price_alerts(self) -> List[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        alerts = []
        
        async with self.db_service.async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–µ–π—Å—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stmt = (
                select(Case, CaseStatistics)
                .join(CaseStatistics, Case.id == CaseStatistics.case_id)
                .where(CaseStatistics.current_price.isnot(None))
            )
            result = await session.execute(stmt)
            cases_with_stats = result.all()
            
            for case, stats in cases_with_stats:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞
                if stats.price_change_24h is not None:
                    alert = await self._check_price_change_alert(
                        case, stats, stats.price_change_24h, '24h'
                    )
                    if alert:
                        alerts.append(alert)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π
                if stats.price_change_7d is not None:
                    alert = await self._check_price_change_alert(
                        case, stats, stats.price_change_7d, '7d'
                    )
                    if alert:
                        alerts.append(alert)
        
        return alerts
    
    async def _check_price_change_alert(
        self, 
        case: Case, 
        stats: CaseStatistics, 
        price_change: float, 
        period: str
    ) -> Optional[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∞–ª–µ—Ä—Ç–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        if period == '24h':
            threshold = self.alert_thresholds['medium_volatility'].price_change_percent
        elif period == '7d':
            threshold = self.alert_thresholds['high_volatility'].price_change_percent
        else:
            threshold = self.alert_thresholds['low_volatility'].price_change_percent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if abs(price_change) >= threshold:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            previous_price = await self._get_previous_price(case.id, period)
            
            if previous_price:
                return Alert(
                    case_id=str(case.id),
                    case_name=case.name,
                    current_price=stats.current_price,
                    previous_price=previous_price,
                    price_change_percent=price_change,
                    alert_type='price_increase' if price_change > 0 else 'price_decrease',
                    timestamp=datetime.utcnow()
                )
        
        return None
    
    async def _get_previous_price(self, case_id: str, period: str) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        async with self.db_service.async_session() as session:
            if period == '24h':
                # –¶–µ–Ω–∞ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
                day_ago = datetime.utcnow() - timedelta(days=1)
                stmt = (
                    select(PriceHistory)
                    .where(
                        and_(
                            PriceHistory.case_id == case_id,
                            PriceHistory.timestamp >= day_ago
                        )
                    )
                    .order_by(PriceHistory.timestamp.asc())
                    .limit(1)
                )
            elif period == '7d':
                # –¶–µ–Ω–∞ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
                week_ago = datetime.utcnow() - timedelta(days=7)
                stmt = (
                    select(PriceHistory)
                    .where(
                        and_(
                            PriceHistory.case_id == case_id,
                            PriceHistory.timestamp >= week_ago
                        )
                    )
                    .order_by(PriceHistory.timestamp.asc())
                    .limit(1)
                )
            else:
                return None
            
            result = await session.execute(stmt)
            price_history = result.scalar_one_or_none()
            
            return price_history.price if price_history else None
    
    async def send_telegram_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Telegram"""
        if not self.telegram_service:
            self.logger.warning("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ê–ª–µ—Ä—Ç: {alert.case_name} - {alert.price_change_percent:.2f}%")
            return
        
        try:
            await self.telegram_service.send_price_alerts([{
                'case_name': alert.case_name,
                'current_price': alert.current_price,
                'previous_price': alert.previous_price,
                'price_change_percent': alert.price_change_percent
            }])
            self.logger.info(f"Telegram –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert.case_name}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def send_console_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        emoji = "üìà" if alert.price_change_percent > 0 else "üìâ"
        self.logger.info(f"{emoji} –ê–õ–ï–†–¢: {alert.case_name} - {alert.price_change_percent:+.2f}% "
                        f"({alert.previous_price:.2f} ‚Üí {alert.current_price:.2f} —Ä—É–±.)")
    
    async def process_alerts(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = await self.check_price_alerts()
        
        if not alerts:
            self.logger.info("–ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(alerts)} –∞–ª–µ—Ä—Ç–æ–≤")
        
        for alert in alerts:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
            await self.send_console_alert(alert)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
            await self.send_telegram_alert(alert)
    
    def configure_telegram(self, bot_token: str, chat_id: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.telegram_config = TelegramConfig(
            bot_token=bot_token,
            chat_id=chat_id
        )
        self.telegram_service = TelegramNotificationService(self.db_service, self.telegram_config)
        self.logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞: {chat_id}")
    
    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        if self.telegram_service:
            await self.telegram_service.send_daily_summary()
    
    async def send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        if self.telegram_service:
            await self.telegram_service.send_startup_notification()
    
    async def send_shutdown_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        if self.telegram_service:
            await self.telegram_service.send_shutdown_notification()
    
    async def test_telegram_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        if self.telegram_service:
            return await self.telegram_service.test_connection()
        return False
    
    async def get_alert_history(self, days: int = 7) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∞–ª–µ—Ä—Ç–æ–≤
        return []


class AlertScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, notification_service: NotificationService):
        self.notification_service = notification_service
        self.is_running = False
    
    async def start_monitoring(self, interval_minutes: int = 30):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        self.is_running = True
        print(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω)")
        
        while self.is_running:
            try:
                await self.notification_service.process_alerts()
                await asyncio.sleep(interval_minutes * 60)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
