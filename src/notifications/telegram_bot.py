"""
Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö –Ω–∞ –∫–µ–π—Å—ã
"""

import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime
from typing import Dict, List, Optional

import aiohttp

from src.core.database import DatabaseService


@dataclass
class TelegramConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞"""
    bot_token: str
    chat_id: str
    parse_mode: str = "HTML"
    disable_web_page_preview: bool = True


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, config: TelegramConfig):
        self.config = config
        self.base_url = f"https://api.telegram.org/bot{config.bot_token}"
        self.session: Optional[aiohttp.ClientSession] = None
        self.logger = logging.getLogger(__name__)
    
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    async def send_message(self, text: str, chat_id: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.session:
            self.logger.error("–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        chat_id = chat_id or self.config.chat_id
        
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": self.config.parse_mode,
                "disable_web_page_preview": self.config.disable_web_page_preview
            }
            
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    return True
                else:
                    error_text = await response.text()
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            self.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False
    
    async def send_alert(self, case_name: str, current_price: float, 
                        previous_price: float, price_change_percent: float) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã"""
        emoji = "üìà" if price_change_percent > 0 else "üìâ"
        
        message = f"""
{emoji} <b>–ê–õ–ï–†–¢: {case_name}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {current_price:.2f} —Ä—É–±.
üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {price_change_percent:+.2f}%
üîÑ <b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞:</b> {previous_price:.2f} —Ä—É–±.
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}
        """.strip()
        
        return await self.send_message(message)
    
    async def send_market_summary(self, summary: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä—ã–Ω–∫—É"""
        sentiment_emoji = {
            'bullish': 'üìà',
            'bearish': 'üìâ', 
            'neutral': '‚û°Ô∏è'
        }.get(summary.get('market_sentiment', 'neutral'), '‚û°Ô∏è')
        
        message = f"""
{sentiment_emoji} <b>–°–í–û–î–ö–ê –†–´–ù–ö–ê</b>

üìä <b>–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤:</b> {summary.get('total_cases', 0)}
üí∞ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {summary.get('average_price', 0):.2f} —Ä—É–±.
üìà <b>–†–æ—Å—Ç –∑–∞ 24—á:</b> {summary.get('gainers_24h', 0)}
üìâ <b>–ü–∞–¥–µ–Ω–∏–µ –∑–∞ 24—á:</b> {summary.get('losers_24h', 0)}
üîÑ <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b> {summary.get('market_sentiment', 'unknown')}
        """.strip()
        
        return await self.send_message(message)
    
    async def send_top_movers(self, gainers: List[Dict], losers: List[Dict]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ø –≥–µ–π–Ω–µ—Ä–æ–≤ –∏ –ª—É–∑–µ—Ä–æ–≤"""
        message = "<b>üèÜ –¢–û–ü –î–í–ò–ñ–ï–ù–ò–Ø –¶–ï–ù</b>\n\n"
        
        if gainers:
            message += "<b>üìà –¢–û–ü –ì–ï–ô–ù–ï–†–´:</b>\n"
            for i, gainer in enumerate(gainers[:5], 1):
                message += f"{i}. {gainer['name']}: <b>+{gainer['price_change']:.2f}%</b>\n"
            message += "\n"
        
        if losers:
            message += "<b>üìâ –¢–û–ü –õ–£–ó–ï–†–´:</b>\n"
            for i, loser in enumerate(losers[:5], 1):
                message += f"{i}. {loser['name']}: <b>{loser['price_change']:.2f}%</b>\n"
        
        return await self.send_message(message)
    
    async def send_volatile_cases(self, volatile_cases: List[Dict]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤"""
        if not volatile_cases:
            return True
        
        message = "<b>‚ö° –í–û–õ–ê–¢–ò–õ–¨–ù–´–ï –ö–ï–ô–°–´</b>\n\n"
        
        for i, case in enumerate(volatile_cases[:5], 1):
            message += f"{i}. <b>{case['name']}</b>\n"
            message += f"   üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {case['volatility']:.2f}\n"
            message += f"   üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {case['avg_price']:.2f} —Ä—É–±.\n"
            message += f"   üìà –î–∏–∞–ø–∞–∑–æ–Ω: {case['min_price']:.2f} - {case['max_price']:.2f} —Ä—É–±.\n\n"
        
        return await self.send_message(message)
    
    async def send_error_notification(self, error_message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        message = f"""
üö® <b>–û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´</b>

‚ùå <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {error_message}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """.strip()
        
        return await self.send_message(message)
    
    async def send_startup_notification(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        message = """
üöÄ <b>–°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê</b>

‚úÖ CaseParser —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
        """.strip()
        
        return await self.send_message(message)
    
    async def send_shutdown_notification(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
        message = """
üõë <b>–°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>

‚ùå CaseParser –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """.strip()
        
        return await self.send_message(message)
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
        if not self.session:
            return False
        
        try:
            url = f"{self.base_url}/getMe"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('ok'):
                        bot_info = data.get('result', {})
                        self.logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.get('username', 'unknown')}")
                        return True
                return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False


class TelegramNotificationService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, db_service: DatabaseService, telegram_config: TelegramConfig):
        self.db_service = db_service
        self.telegram_config = telegram_config
        self.logger = logging.getLogger(__name__)
    
    async def send_price_alerts(self, alerts: List[Dict]) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –æ —Ü–µ–Ω–∞—Ö"""
        if not alerts:
            return
        
        async with TelegramBot(self.telegram_config) as bot:
            for alert in alerts:
                try:
                    success = await bot.send_alert(
                        case_name=alert['case_name'],
                        current_price=alert['current_price'],
                        previous_price=alert['previous_price'],
                        price_change_percent=alert['price_change_percent']
                    )
                    
                    if success:
                        self.logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {alert['case_name']}")
                    else:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {alert['case_name']}")
                        
                except Exception as e:
                    self.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def send_daily_summary(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        try:
            from src.services.analytics import AnalyticsService
            analytics_service = AnalyticsService(self.db_service)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤–æ–¥–∫–∏
            market_overview = await analytics_service.get_market_overview()
            top_gainers = await analytics_service.get_top_gainers(1, 5)  # –ó–∞ 24 —á–∞—Å–∞
            top_losers = await analytics_service.get_top_losers(1, 5)
            volatile_cases = await analytics_service.get_most_volatile_cases(7, 5)
            
            async with TelegramBot(self.telegram_config) as bot:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Ä—ã–Ω–∫—É
                await bot.send_market_summary(market_overview)
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø –¥–≤–∏–∂–µ–Ω–∏—è
                await bot.send_top_movers(top_gainers, top_losers)
                await asyncio.sleep(1)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –∫–µ–π—Å—ã
                await bot.send_volatile_cases(volatile_cases)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
    
    async def send_error_notification(self, error_message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        async with TelegramBot(self.telegram_config) as bot:
            await bot.send_error_notification(error_message)
    
    async def send_startup_notification(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ"""
        async with TelegramBot(self.telegram_config) as bot:
            await bot.send_startup_notification()
    
    async def send_shutdown_notification(self) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        async with TelegramBot(self.telegram_config) as bot:
            await bot.send_shutdown_notification()
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        async with TelegramBot(self.telegram_config) as bot:
            return await bot.test_connection()
