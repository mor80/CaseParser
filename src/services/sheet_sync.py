"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets
"""

from typing import Dict

from src.core.database import DatabaseService
from src.services.price_fetcher import PriceFetcher
from src.services.sheet_client import GoogleSheetClient


class SheetSyncService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
    
    def __init__(self, db_service: DatabaseService):
        self.db_service = db_service
        self.sheet_client = GoogleSheetClient()
        self.price_fetcher = PriceFetcher()
    
    async def sync_cases_from_sheet(self) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ–π—Å–æ–≤ –∏–∑ Google Sheets –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ–π—Å–æ–≤ –∏–∑ Google Sheets...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
            rows = self.sheet_client.read_rows()
            
            if not rows:
                return {
                    'success': False,
                    'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets',
                    'synced_count': 0
                }
            
            synced_count = 0
            errors = []
            
            for row in rows:
                try:
                    case_name = row.get('Name', '').strip()
                    if not case_name:
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ–π—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    case = await self.db_service.save_case(
                        name=case_name,
                        steam_url=row.get('Steam URL', '')
                    )
                    
                    synced_count += 1
                    print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–µ–π—Å: {case_name}")
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–µ–π—Å–∞ {row.get('Name', 'Unknown')}: {e}"
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")
            
            return {
                'success': True,
                'message': f'–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} –∫–µ–π—Å–æ–≤',
                'synced_count': synced_count,
                'errors': errors
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}',
                'synced_count': 0
            }
    
    async def sync_prices_from_sheet(self) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω –∏–∑ Google Sheets"""
        try:
            print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω –∏–∑ Google Sheets...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
            rows = self.sheet_client.read_rows()
            
            if not rows:
                return {
                    'success': False,
                    'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets',
                    'updated_count': 0
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤
            prices_by_row = await self.price_fetcher.fetch_prices_in_batches(rows)
            
            updated_count = 0
            errors = []
            
            for row_idx, price in prices_by_row.items():
                try:
                    if price == "N/A":
                        continue
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
                    case_name = rows[row_idx - 2]["Name"]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–µ–π—Å
                    case = await self.db_service.save_case(case_name)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    await self.db_service.save_price(str(case.id), float(price))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    await self.db_service.update_case_statistics(str(case.id))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
                    self.sheet_client.update_price(row_idx, price)
                    
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {case_name}: {price} —Ä—É–±.")
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}"
                    errors.append(error_msg)
                    print(f"‚ùå {error_msg}")
            
            return {
                'success': True,
                'message': f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ü–µ–Ω',
                'updated_count': updated_count,
                'errors': errors
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω: {e}',
                'updated_count': 0
            }
    
    async def full_sync(self) -> Dict:
        """–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets...")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–µ–π—Å—ã
        cases_result = await self.sync_cases_from_sheet()
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã
        prices_result = await self.sync_prices_from_sheet()
        
        return {
            'success': cases_result['success'] and prices_result['success'],
            'cases_sync': cases_result,
            'prices_sync': prices_result,
            'total_synced': cases_result.get('synced_count', 0) + prices_result.get('updated_count', 0)
        }
    
    async def get_sheet_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Google Sheets"""
        try:
            rows = self.sheet_client.read_rows()
            
            if not rows:
                return {
                    'connected': False,
                    'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets',
                    'rows_count': 0
                }
            
            return {
                'connected': True,
                'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ',
                'rows_count': len(rows),
                'sample_data': rows[:3] if rows else []
            }
            
        except Exception as e:
            return {
                'connected': False,
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}',
                'rows_count': 0
            }
