#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π CaseParser
"""

import asyncio
import sys
from datetime import datetime

from src.core.cache import CacheManager, CacheService
from src.core.database import DatabaseService
from src.core.migrations import MigrationService
from src.notifications.notifications import NotificationService
from src.services.analytics import AnalyticsService


async def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        db_service = DatabaseService()
        await db_service.init_db()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        return db_service
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


async def test_migrations(db_service):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π...")
    try:
        migration_service = MigrationService(db_service)
        status = await migration_service.get_migration_status()
        print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:")
        print(f"   –í—Å–µ–≥–æ –º–∏–≥—Ä–∞—Ü–∏–π: {status['total_migrations']}")
        print(f"   –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: {status['applied_migrations']}")
        print(f"   –û–∂–∏–¥–∞–µ—Ç: {status['pending_migrations']}")
        
        if status['pending_migrations'] > 0:
            print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π...")
            success = await migration_service.run_migrations()
            if success:
                print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π")
        else:
            print("‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")


async def test_analytics(db_service):
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    try:
        analytics_service = AnalyticsService(db_service)
        
        # –¢–µ—Å—Ç –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞
        print("   üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Ä—ã–Ω–∫–∞...")
        market_overview = await analytics_service.get_market_overview()
        print(f"   ‚úÖ –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞: {market_overview['total_cases']} –∫–µ–π—Å–æ–≤")
        
        # –¢–µ—Å—Ç —Ç–æ–ø –≥–µ–π–Ω–µ—Ä–æ–≤
        print("   üöÄ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –≥–µ–π–Ω–µ—Ä–æ–≤...")
        top_gainers = await analytics_service.get_top_gainers(7, 5)
        print(f"   ‚úÖ –¢–æ–ø –≥–µ–π–Ω–µ—Ä–æ–≤: {len(top_gainers)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç —Ç–æ–ø –ª—É–∑–µ—Ä–æ–≤
        print("   üìâ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ª—É–∑–µ—Ä–æ–≤...")
        top_losers = await analytics_service.get_top_losers(7, 5)
        print(f"   ‚úÖ –¢–æ–ø –ª—É–∑–µ—Ä–æ–≤: {len(top_losers)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤
        print("   ‚ö° –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤...")
        volatile_cases = await analytics_service.get_most_volatile_cases(30, 5)
        print(f"   ‚úÖ –í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –∫–µ–π—Å—ã: {len(volatile_cases)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")


async def test_notifications(db_service):
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    try:
        notification_service = NotificationService(db_service)
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤...")
        alerts = await notification_service.check_price_alerts()
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if alerts:
            print("   üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            for alert in alerts[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                await notification_service.send_console_alert(alert)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")


async def test_cache():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        cache_service = CacheService()
        cache_manager = CacheManager(cache_service)
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫—ç—à–∞
        print("   üíæ –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫—ç—à–∞...")
        test_data = {"test": "data", "timestamp": datetime.utcnow().isoformat()}
        
        await cache_service.set("test_key", test_data, 60)
        cached_data = await cache_service.get("test_key")
        
        if cached_data and cached_data["test"] == "data":
            print("   ‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            print("   ‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫—ç—à–∞")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
        stats = await cache_service.get_stats()
        print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await cache_service.delete("test_key")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: {e}")


async def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    try:
        import requests
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
        print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API...")
        try:
            response = requests.get("http://localhost:8000/", timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("   ‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
        
        # –¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
        print("   üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞...")
        try:
            response = requests.get("http://localhost:8001/", timeout=5)
            if response.status_code == 200:
                print("   ‚úÖ –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"   ‚ö†Ô∏è –î–∞—à–±–æ—Ä–¥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("   ‚ö†Ô∏è –î–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
            
    except ImportError:
        print("   ‚ö†Ô∏è requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π CaseParser")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_service = await test_database_connection()
    if not db_service:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        sys.exit(1)
    
    # –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–π
    await test_migrations(db_service)
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    await test_analytics(db_service)
    
    # –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await test_notifications(db_service)
    
    # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    await test_cache()
    
    # –¢–µ—Å—Ç API
    await test_api_endpoints()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä: python run_api.py")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥: python run_dashboard.py")
    print("4. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–∞—à–±–æ—Ä–¥: http://localhost:8001")
    print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8000/docs")


if __name__ == "__main__":
    asyncio.run(main())
