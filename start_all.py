#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ CaseParser
"""

import subprocess
import sys
import time
from pathlib import Path


def run_command(command, description, background=False):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üöÄ {description}...")
    try:
        if background:
            process = subprocess.Popen(
                command, 
                shell=True, 
                stdout=subprocess.PIPE, 
                stderr=subprocess.PIPE
            )
            return process
        else:
            result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            return result
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {description}: {e}")
        return None


def check_docker_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Docker —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
        result = subprocess.run(
            "docker-compose ps postgres", 
            shell=True, 
            capture_output=True, 
            text=True
        )
        if "Up" in result.stdout:
            print("‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ö†Ô∏è PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        result = subprocess.run(
            "docker-compose ps redis", 
            shell=True, 
            capture_output=True, 
            text=True
        )
        if "Up" in result.stdout:
            print("‚úÖ Redis –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ö†Ô∏è Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False


def start_docker_services():
    """–ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üê≥ –ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –∏ Redis
    result = run_command(
        "docker-compose up -d postgres redis",
        "–ó–∞–ø—É—Å–∫ PostgreSQL –∏ Redis"
    )
    
    if result is None:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å—ã")
        return False
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    time.sleep(10)
    
    return check_docker_services()


def run_migrations():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    result = run_command(
        "python -m src.core.migrations",
        "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    )
    
    return result is not None


def start_main_app():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üìä –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    process = run_command(
        "python main.py",
        "–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω)",
        background=True
    )
    
    return process


def start_api_server():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    process = run_command(
        "python run_api.py",
        "API —Å–µ—Ä–≤–µ—Ä",
        background=True
    )
    
    return process


def start_dashboard():
    """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
    print("üìà –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    process = run_command(
        "python run_dashboard.py",
        "–í–µ–±-–¥–∞—à–±–æ—Ä–¥",
        background=True
    )
    
    return process

def start_frontend():
    """–ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    print("üé® –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    process = run_command(
        "python run_frontend.py",
        "–§—Ä–æ–Ω—Ç–µ–Ω–¥",
        background=True
    )
    
    return process


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ CaseParser")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("main.py").exists():
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    try:
        subprocess.run("docker --version", shell=True, check=True, capture_output=True)
        print("‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
    except subprocess.CalledProcessError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
    try:
        subprocess.run("docker-compose --version", shell=True, check=True, capture_output=True)
        print("‚úÖ Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω")
    except subprocess.CalledProcessError:
        print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Docker —Å–µ—Ä–≤–∏—Å—ã
    if not start_docker_services():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å—ã")
        sys.exit(1)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    if not run_migrations():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    processes = []
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    main_process = start_main_app()
    if main_process:
        processes.append(("–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", main_process))
    
    # API —Å–µ—Ä–≤–µ—Ä
    api_process = start_api_server()
    if api_process:
        processes.append(("API —Å–µ—Ä–≤–µ—Ä", api_process))
    
    # –î–∞—à–±–æ—Ä–¥
    dashboard_process = start_dashboard()
    if dashboard_process:
        processes.append(("–î–∞—à–±–æ—Ä–¥", dashboard_process))
    
    # –§—Ä–æ–Ω—Ç–µ–Ω–¥
    frontend_process = start_frontend()
    if frontend_process:
        processes.append(("–§—Ä–æ–Ω—Ç–µ–Ω–¥", frontend_process))
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
    print("üåê API —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")
    print("üìä –î–∞—à–±–æ—Ä–¥: http://localhost:8001")
    print("üé® –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:8001")
    print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    time.sleep(5)
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    try:
        import requests
        response = requests.get("http://localhost:8000/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—à–±–æ—Ä–¥
    try:
        response = requests.get("http://localhost:8001/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –î–∞—à–±–æ—Ä–¥ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è –î–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ CaseParser —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print("\nüìñ –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose logs -f")
    print("‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose down")
    print("‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π: python test_features.py")
    print("\n‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        while True:
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            for name, process in processes:
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for name, process in processes:
            try:
                process.terminate()
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    main()
