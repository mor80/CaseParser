import asyncio
import os
from typing import Optional

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import UPDATE_PERIOD_MIN
from src.core.database import DatabaseService
from src.notifications.notifications import AlertScheduler, NotificationService
from src.notifications.telegram_bot import TelegramConfig
from src.services.analytics import AnalyticsService
from src.services.portfolio import PortfolioService
from src.services.price_fetcher import PriceFetcher
from src.services.sheet_client import GoogleSheetClient
from src.services.sheet_sync import SheetSyncService

sheet_client = GoogleSheetClient()
price_fetcher = PriceFetcher()
db_service = DatabaseService()
analytics_service = AnalyticsService(db_service)
portfolio_service = PortfolioService(db_service)
sheet_sync_service = SheetSyncService(db_service)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
telegram_config = None
if os.getenv('TELEGRAM_BOT_TOKEN') and os.getenv('TELEGRAM_CHAT_ID'):
    telegram_config = TelegramConfig(
        bot_token=os.getenv('TELEGRAM_BOT_TOKEN'),
        chat_id=os.getenv('TELEGRAM_CHAT_ID')
    )

notification_service = NotificationService(db_service, telegram_config)
alert_scheduler = AlertScheduler(notification_service)


def normalize_price_value(price: str) -> Optional[float]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ float."""
    if price is None:
        return None
    if isinstance(price, (int, float)):
        return float(price)

    price_str = str(price).strip()
    if not price_str or price_str.upper() == "N/A":
        return None

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É float
    cleaned = (
        price_str.replace("—Ä—É–±.", "")
        .replace("‚ÇΩ", "")
        .replace("\u200e", "")
        .replace("\u00a0", "")
        .replace(" ", "")
        .replace(",", ".")
    )

    try:
        return float(cleaned)
    except ValueError:
        return None


async def update_prices_job():
    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω‚Ä¶")
    rows = sheet_client.read_rows()
    prices_by_row = await price_fetcher.fetch_prices_in_batches(rows)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for row_idx, price in prices_by_row.items():
        row_data = rows[row_idx - 2] if 0 <= (row_idx - 2) < len(rows) else {}
        case_name = str(row_data.get("Name", "")).strip()
        steam_url = row_data.get("Steam URL") or None

        if not case_name:
            print(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {row_idx}: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–µ–π—Å–∞")
            continue

        try:
            case = await db_service.save_case(case_name, steam_url=steam_url)
        except Exception as exc:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ–π—Å–∞ {case_name}: {exc}")
            continue

        numeric_price = normalize_price_value(price)
        sheet_price_value = price

        if numeric_price is None:
            fallback_price = normalize_price_value(row_data.get("Price"))
            if fallback_price is not None:
                numeric_price = fallback_price
                sheet_price_value = row_data.get("Price")

        if numeric_price is not None:
            try:
                await db_service.save_price(str(case.id), numeric_price)
                await db_service.update_case_statistics(str(case.id))
                print(f"row {row_idx}: {numeric_price} (saved to DB)")
            except Exception as exc:
                print(f"Error saving price to DB for row {row_idx}: {exc}")
        else:
            print(f"row {row_idx}: price '{price}' –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")

        # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets –∏—Å—Ö–æ–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        try:
            value_for_sheet = sheet_price_value if sheet_price_value is not None else ""
            sheet_client.update_price(row_idx, value_for_sheet)
        except Exception as exc:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets –≤ —Å—Ç—Ä–æ–∫–µ {row_idx}: {exc}")
        else:
            print(f"row {row_idx}: {sheet_price_value}")

    print("–ì–æ—Ç–æ–≤–æ!")


async def initial_price_parsing():
    """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("üöÄ –ù–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω...")
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–µ–π—Å—ã –∏–∑ Google Sheets
        print("üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ–π—Å–æ–≤ –∏–∑ Google Sheets...")
        sync_result = await sheet_sync_service.full_sync()
        if sync_result['success']:
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {sync_result['total_synced']} –∑–∞–ø–∏—Å–µ–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_result}")
        
        # –ó–∞—Ç–µ–º –ø–∞—Ä—Å–∏–º —Ü–µ–Ω—ã
        print("üí∞ –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω...")
        await update_prices_job()
        print("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")


async def cleanup_old_data_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)"""
    print("–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        deleted_count = await db_service.cleanup_old_data(30)
        print(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


async def update_all_statistics_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤"""
    print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        cases = await db_service.get_all_cases()
        for case in cases:
            await db_service.update_case_statistics(str(case.id))
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {len(cases)} –∫–µ–π—Å–æ–≤")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


async def check_alerts_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤...")
    try:
        await notification_service.process_alerts()
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–µ—Ä—Ç–æ–≤: {e}")


async def sync_google_sheets_job():
    """–ó–∞–¥–∞—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets"""
    print("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...")
    try:
        result = await sheet_sync_service.full_sync()
        if result['success']:
            print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['total_synced']} –∑–∞–ø–∏—Å–µ–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {result}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await db_service.init_db()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


def main() -> None:
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    loop.run_until_complete(init_database())

    scheduler = AsyncIOScheduler(event_loop=loop)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
    scheduler.add_job(
        update_prices_job,
        trigger="interval",
        minutes=UPDATE_PERIOD_MIN,
        id="update_prices",
    )

    # –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
    scheduler.add_job(
        cleanup_old_data_job, trigger="interval", hours=6, id="cleanup_old_data"
    )

    # –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
    scheduler.add_job(
        update_all_statistics_job, trigger="interval", hours=2, id="update_statistics"
    )

    # –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
    scheduler.add_job(
        check_alerts_job, trigger="interval", minutes=30, id="check_alerts"
    )
    
    # –ó–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
    scheduler.add_job(
        sync_google_sheets_job, trigger="interval", minutes=10, id="sync_sheets"
    )

    scheduler.start()

    # –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    loop.create_task(initial_price_parsing())

    print(f"–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {UPDATE_PERIOD_MIN} –º–∏–Ω.")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
    print("- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
    print("- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
    print("- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞")
    print("- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç")

    try:
        loop.run_forever()
    except (KeyboardInterrupt, SystemExit):
        print("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")


if __name__ == "__main__":
    main()
